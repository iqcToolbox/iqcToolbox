%% Requirements:
% 1. lftToSs shall convert uncertainty-free, time-invariant Ulft to ss objects
% 2. lftToSs shall throw an error if provided an invalid object, an uncertain
%     Ulft, or a Ulft that doesn't have a [0 1] horizon_period

%% DUMMY COPYRIGHT STATEMENT
%% Test class for lftToSs
classdef testLftToSs < matlab.unittest.TestCase
    
methods (TestMethodSetup)
function seedAndReportRng(testCase)
seed = floor(posixtime(datetime('now')));
rng(seed, 'twister');
diagnose_str = ...
    sprintf(['Random inputs may be regenerated by calling: \n',...
             '>> rng(%10d) \n',...
             'before running the remainder of the test''s body'],...
            seed);
testCase.onFailure(@() fprintf(diagnose_str));
end    
end
    
methods(Test)
function testCorrectConversion(testCase)
    % Random discrete-time Ulfts
    lft = Ulft.random('num_deltas', 1,...
                      'req_deltas', {'DeltaDelayZ'},...
                      'horizon_period', [0, 1]);
    ss_out = lftToSs(lft);
    ss_expected = ss(lft.a{1}, lft.b{1}, lft.c{1}, lft.d{1}, lft.timestep);
    verifyEqual(testCase, ss_out, ss_expected)
    verifyFalse(testCase, isct(ss_out))
    
    g = drss(randi([1, 10]));
    verifyEqual(testCase, lftToSs(toLft(g)), g)
    
    % Random continuous-time Ulfts    
    lft = Ulft.random('num_deltas', 1,...
                      'req_deltas', {'DeltaIntegrator'},...
                      'horizon_period', [0, 1]);
    ss_out = lftToSs(lft);
    ss_expected = ss(lft.a{1}, lft.b{1}, lft.c{1}, lft.d{1});
    verifyEqual(testCase, ss_out, ss_expected)
    verifyTrue(testCase, isct(ss_out))
    
    g = rss(randi([1, 10]));
    verifyEqual(testCase, lftToSs(toLft(g)), g)
    
    % Random memoryless
    mat = randn(randi([1, 10]), randi([1, 10]));
    verifyEqual(testCase, lftToSs(toLft(mat)), ss(mat))
end

function testBadInputs(testCase)
    verifyError(testCase, @() lftToSs(1), ?MException)
    
    bad_hp = toLft({1, 1}, [1, 1]);
    verifyError(testCase, @() lftToSs(bad_hp), 'lftToSs:lftToSs')
    
    bad_unc = Ulft.random('num_deltas', 2, 'horizon_period', [0, 1]);
    verifyError(testCase, @() lftToSs(bad_unc), 'lftToSs:lftToSs')
    
    bad_time = toLft(DeltaDelayZ(randi([1, 10]), inf));
    verifyError(testCase, @() lftToSs(bad_time), 'lftToSs:lftToSs')
end
end
end

%%  CHANGELOG
% Sep. 28, 2021 (v0.6.0): Added after v0.5.0 - Micah Fry (micah.fry@ll.mit.edu)