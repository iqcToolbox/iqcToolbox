%% Requirements:
% 1. Ulft.sampleDeltas shall take a cell-array of strings (representing each 
%     delta.name) and a cell-array of Delta and empty objects.  
%     Ulft.sampleDeltas shall return a Ulft object whose indicated Deltas are 
%     sampled and no longer present as a Delta.
% 2. Ulft.sampleDeltas shall accept optional flags to indicate if the sampled 
%     system should be time-invariant (default, no) and if the sampled
%     system should be checked for validity (default, yes)

%%
%  Copyright (c) 2021 Massachusetts Institute of Technology 
%  SPDX-License-Identifier: GPL-2.0
%%

%% Test class for sampling methods.
classdef testUlftSampleDeltas < matlab.unittest.TestCase
    
methods (TestMethodSetup)
function seedAndReportRng(testCase)
    seed = floor(posixtime(datetime('now')));
    rng(seed, 'twister');
    diagnose_str = ...
        sprintf(['Random inputs may be regenerated by calling: \n',...
                 '>> rng(%10d) \n',...
                 'before running the remainder of the test''s body'],...
                seed);
    testCase.onFailure(@() fprintf(diagnose_str));
end    
end
   
methods (Test)
    function testNoOptions(testCase)
        for i = 1:20
            num_del = randi([1, 10]);
            if ~mod(i, 2)
            % With discrete- or continuous-time
                if mod(i / 2, 2)
                    lft = Ulft.random('req_deltas', {'DeltaDelayZ'},...
                                      'num_deltas', num_del);
                else
                    lft = Ulft.random('req_deltas', {'DeltaIntegrator'},...
                                      'num_deltas', num_del);
                end
                samp = sampleDeltas(lft,...
                                    lft.delta.names(2:end),...
                                    cell(1, num_del - 1));
            else
            % Without needing discrete- or continuous-time (i.e., no DeltaDlti)
                lft = Ulft.random('req_deltas', {'DeltaBounded'},...
                                  'num_deltas', num_del);
                ind_dyn = find(strcmp('DeltaDlti', lft.delta.types)...
                               | strcmp('DeltaDelayZ', lft.delta.types)...
                               | strcmp('DeltaIntegrator', lft.delta.types));
                lft = removeUncertainty(lft, ind_dyn);
                samp = sampleDeltas(lft,...
                                    lft.delta.names,...
                                    cell(1, length(lft.delta.deltas)));
            end
            verifyFalse(testCase, samp.uncertain);
            verifyEqual(testCase, size(samp, 1), size(lft, 1))
            verifyEqual(testCase, size(samp, 2), size(lft, 2))
            verifyEqual(testCase, samp.horizon_period, lft.horizon_period)
        end
        for i = 1:5
            lft = Ulft.random('num_deltas', 2, 'req_deltas', {'DeltaDelayZ'});
            del = lft.delta.deltas{end};
            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
            %%%%%% LINES BELOW NEED TO BE REMOVED TO TEST FULL FUNCTIONALITY %%%%%%
            if isa(del, 'DeltaSltvRateBnd')
                mag_diff = del.upper_bound(1) - del.lower_bound(1);
                del.upper_rate = mag_diff * ones(1, length(del.upper_bound));
                del.lower_rate = -del.upper_rate;
                lft.delta.deltas{end} = del;
            end
            %%%%%% LINES ABOVE NEED TO BE REMOVED TO TEST FULL FUNCTIONALITY %%%%%%
            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
            del_samp = sample(del, lft.timestep);
            samp = sampleDeltas(lft, lft.delta.names(end), {del_samp});
        end
    end
    
    function testTimeInvariant(testCase)
        for i = 1:10
            if mod(i / 2, 2)
                lft = Ulft.random('req_deltas', {'DeltaDelayZ'},...
                                  'num_deltas', 2,...
                                  'horizon_period', [0 ,1]);
                lft = matchHorizonPeriod(lft, [randi([0, 10]), randi([1, 10])]);
            else
                lft = Ulft.random('req_deltas', {'DeltaIntegrator'},...
                                  'num_deltas', 2);
            end
            samp = sampleDeltas(lft, lft.delta.names(2), {[]},...
                                'time_invariant', true);
            isTimeInvariant = @(lft) ...
                all(cellfun(@(a) isequal(a, lft.a{1}), lft.a)) &&...
                all(cellfun(@(b) isequal(b, lft.b{1}), lft.b)) &&...
                all(cellfun(@(c) isequal(c, lft.c{1}), lft.c)) &&...
                all(cellfun(@(d) isequal(d, lft.d{1}), lft.d));
            verifyTrue(testCase, isTimeInvariant(samp))
            verifyFalse(testCase, samp.uncertain)
            verifyEqual(testCase, samp.timestep, lft.timestep)
        end
    end
    
    function testOverride(testCase)
        % Random override tests
        for i = 1:10
            if mod(i / 2, 2)
                lft = Ulft.random('req_deltas', {'DeltaDelayZ'},...
                                  'num_deltas', 2,...
                                  'horizon_period', [0 ,1]);
                lft = matchHorizonPeriod(lft, [randi([0, 10]), randi([1, 10])]);
            else
                lft = Ulft.random('req_deltas', {'DeltaIntegrator'},...
                                  'num_deltas', 2);
            end
            del = lft.delta.deltas{2};
            del_samp = DeltaBounded(del.name,...
                                    del.dim_out,...
                                    del.dim_in,...
                                    rand,...
                                    del.horizon_period).sample(lft.timestep);
            samp = sampleDeltas(lft, lft.delta.names(2), {del_samp},...
                                'override', true);
            verifyFalse(testCase, samp.uncertain)
        end
        
        % Override should force error not to be thrown for bad DeltaSlti sample
        lft = toLft(DeltaSlti('d', 2));
        del_samp = toLft(5 * ones(2));
        samp = sampleDeltas(lft, {'d'}, {del_samp}, 'override', true);
        verifyClass(testCase, samp, 'Ulft')
        
        % Override should still allow error to be thrown for bad dims and hp
        del_samp = matchHorizonPeriod(del_samp, [2, 3]);
        verifyError(testCase,...
                    @() sampleDeltas(lft, {'d'}, {del_samp}, 'override', true),...
                    'Ulft:sampleDeltas')
        
        del_samp = toLft(1);
        verifyError(testCase,...
                    @() sampleDeltas(lft, {'d'}, {del_samp}, 'override', true),...
                    'Ulft:sampleDeltas')
    end
end
end

%%  CHANGELOG
% Sep. 28, 2021 (v0.6.0): Added after v0.5.0 - Micah Fry (micah.fry@ll.mit.edu)