%% Requirements:
%  1. DisturbanceBandedWhite shall be defined by it's name, the input
%      channel of interest, the frequency defining the band in which the signal
%      is white, and the horizon_period
%  2. Upon construction, and when queried by user, it shall display the
%      information described in (1).
%
%  3. If channel information is not provided by the user, by
%      default the disturbance shall apply to the first channel (chan_in = {1}),
%      the frequency shall be pi, and the horizon_period shall be [0, 1].
%
%  4. If the user provides no name, DisturbanceConstantWindow shall throw an 
%      exception
%  5. If the user provides a channel that has more than one cell-entry,
%      DisturbanceConstantWindow shall throw an exception
%  6. If the user indicates more than one channel, DisturbanceBandedWhite shall
%      throw an exception
%  7. If the user indicates a frequency band with omega = 0, 
%      DisturbanceBandedWhite shall throw and exception
%
%  8. DisturbanceConstantWindow shall ensure that it's properties are consistent 
%      with its current horizon_period property
%  9. DisturbanceConstantWindow shall be capable of changing it's properties to 
%      match a newly input horizon_period, as long as the new 
%      horizon_period is consistent with the prior horizon_period
%
%  10. DisturbanceConstantWindow shall be capable of generating a
%       MultiplierConstantWindow from a DisturbanceConstantWindow object
%
%  11. A user may optionally specify the poles of MultiplierBandedWhite.
%
%  12. If a user does not specify the poles of MultiplierBandedWhite, the
%       default pole shall be -0.5.

%%
%  Copyright (c) 2021 Massachusetts Institute of Technology 
%  SPDX-License-Identifier: GPL-2.0
%%

%% Test class for DisturbanceBandedWhite and MultiplierBandedWhite
classdef testDisturbanceBandedWhite < matlab.unittest.TestCase
    
methods (TestMethodSetup)
function seedAndReportRng(testCase)
    seed = floor(posixtime(datetime('now')));
    rng(seed);
    diagnose_str = ...
        sprintf(['Random inputs may be regenerated by calling: \n',...
                 '>> rng(%10d) \n',...
                 'before running the remainder of the test''s body'],...
                seed);
    testCase.onFailure(@() fprintf(diagnose_str));
end    
end
    
methods (Test)
function testDisturbanceFullConstructor(testCase)
    name = 'test';
    chan_in = {2};
    omega = pi/2;
    horizon_period = [3, 1];
    d = DisturbanceBandedWhite(name, chan_in, omega, horizon_period)
    testCase.verifyEqual(d.name, name)
    testCase.verifyEqual(d.chan_in, repmat(chan_in, 1, sum(horizon_period)))
    testCase.verifyEqual(d.omega, omega)
    testCase.verifyEqual(d.horizon_period, horizon_period)
end

function testThreeArgConstructor(testCase)
    name = 'test';
    chan_in = {[1]};
    omega = pi;
    d = DisturbanceBandedWhite(name, chan_in, omega);
    testCase.verifyEqual(d.name, name)
    testCase.verifyEqual(d.chan_in, chan_in)
    testCase.verifyEqual(d.omega, omega)
    testCase.verifyEqual(d.horizon_period, [0, 1])
end

function testTwoArgConstructor(testCase)
    name = 'test';
    chan_in = {4};
    d = DisturbanceBandedWhite(name, chan_in);
    testCase.verifyEqual(d.name, name)
    testCase.verifyEqual(d.chan_in, chan_in)
    testCase.verifyEqual(d.omega, pi)
    testCase.verifyEqual(d.horizon_period, [0, 1])
end

function testOneArgConstructor(testCase)
    name = 'test';
    d = DisturbanceBandedWhite(name);
    testCase.verifyEqual(d.name, name)
    testCase.verifyEqual(d.chan_in, {1})
    testCase.verifyEqual(d.omega, pi)
    testCase.verifyEqual(d.horizon_period, [0, 1])
end

function testBadConstructorCalls(testCase)
    testCase.verifyError(@() DisturbanceBandedWhite(),...
                         'DisturbanceBandedWhite:DisturbanceBandedWhite')
    bad_chan = {1, 1};
    testCase.verifyError(@() DisturbanceBandedWhite('test', bad_chan, 1, [0, 2]),...
                         'DisturbanceBandedWhite:DisturbanceBandedWhite')
    bad_chan = {[]};
    testCase.verifyError(@() DisturbanceBandedWhite('test', bad_chan),...
                         'DisturbanceBandedWhite:DisturbanceBandedWhite')
    bad_chan = {[1; 2]};
    testCase.verifyError(@() DisturbanceBandedWhite('test', bad_chan),...
                         'DisturbanceBandedWhite:DisturbanceBandedWhite')
    bad_omega = 0;
    testCase.verifyError(@() DisturbanceBandedWhite('test', {1}, bad_omega),...
                         ?MException)
end

function testMatchHorizonPeriod(testCase)
    name = 'test';
    chan_in = {2};
    omega = pi/2;
    d = DisturbanceBandedWhite(name, chan_in, omega);
    new_hp = [2, 5];
    d = d.matchHorizonPeriod(new_hp);
    testCase.verifyEqual(d.chan_in, repmat(chan_in, 1, sum(new_hp)))
    testCase.verifyEqual(d.omega, omega)
    testCase.verifyEqual(d.horizon_period, new_hp)
end

function testMultiplierConstruction(testCase)
    name = 'test';
    d = DisturbanceBandedWhite(name);
    dim_in = 1;
    discrete = true;
    m = MultiplierBandedWhite(d, dim_in, discrete);
    testCase.verifyEqual(m.dim_in, dim_in)
    testCase.verifyEqual(m.discrete, discrete)
    testCase.verifyEqual(m.poles, -0.5)
    
    poles = [.2, -.3, 0];
    m = MultiplierBandedWhite(d, dim_in, discrete, 'poles', poles);
    testCase.verifyEqual(m.poles, poles)   
    
    % Make sure warning occurs if discrete is not specified
    warning_state = warning;
    warning('on', 'DisturbanceBandedWhite:disturbanceToMultiplier')
    testCase.verifyWarning(@() d.disturbanceToMultiplier('dim_in_lft', dim_in),...
                           'DisturbanceBandedWhite:disturbanceToMultiplier');
    warning(warning_state)
    testCase.verifyError(@() d.disturbanceToMultiplier,...
                         'DisturbanceBandedWhite:disturbanceToMultiplier');
end
end
end

%%  CHANGELOG
% Nov. 23, 2021: Added after v0.6.0 - Micah Fry (micah.fry@ll.mit.edu)