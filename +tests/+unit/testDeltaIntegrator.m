%% Requirements:
%  1. DeltaIntegrator shall only be defined by input/output dimensions
%  2. Upon construction, and when queried by user, it shall display the
%      information described in (1), with the name and type being "S" and 
%      "integration operator", respectively.
%  3. If dimension information is not provided by the user, by
%      default the object shall be 1 x 1.
%
%  4. If the user provides an in/out dimension that is not a natural number
%      DeltaIntegrator shall throw an exception
%
%  5. The in/out dimensions of DeltaIntegrator shall be equal.
%
%  7. DeltaIntegrator shall return the null mappings and the same DeltaIntegrator
%      object, without throwing a warning, when queried for normalization.

%%
%  Copyright (c) 2021 Massachusetts Institute of Technology 
%  SPDX-License-Identifier: GPL-2.0
%%

%% Test class for DeltaIntegrator.
classdef testDeltaIntegrator < matlab.unittest.TestCase
    
    methods (TestMethodSetup)
        function seedAndReportRng(testCase)
            seed = floor(posixtime(datetime('now')));
            rng('default');
            rng(seed, 'twister');
            diagnose_str = ...
                sprintf(['Random inputs may be regenerated by calling: \n',...
                         '>> rng(%10d) \n',...
                         'before running the remainder of the test''s body'],...
                        seed);
            testCase.onFailure(@() fprintf(diagnose_str));
        end    
    end
    
    methods (Test)
        function testFullConstructor(testCase)
            dim_outin = 2;
            delta_integrator = DeltaIntegrator(dim_outin);
            verifyEqual(testCase, delta_integrator.name, 'Integrator')
            verifyEqual(testCase, delta_integrator.dim_in, dim_outin)
            verifyEqual(testCase, delta_integrator.dim_out, dim_outin)
            verifyEqual(testCase,...
                        delta_integrator.dim_in,...
                        delta_integrator.dim_out)
        end

        function testZeroArgConstructor(testCase)
            delta_integrator = DeltaIntegrator();
            verifyEqual(testCase, delta_integrator.name, 'Integrator')
            verifyEqual(testCase, delta_integrator.dim_in, 1)
            verifyEqual(testCase, delta_integrator.dim_out, 1)
            verifyEqual(testCase,...
                        delta_integrator.dim_in,...
                        delta_integrator.dim_out)
        end

        function testFailedDimension(testCase)
            verifyError(...
                testCase, @() DeltaIntegrator('test', -2), ?MException)
            verifyError(...
                testCase, @() DeltaIntegrator('test', 2.2), ?MException)
        end
        
        function testNormalization(testCase)
            warning_state = warning;
            warning('error', 'Ulft:normalizeLft')            
            for i = 1:10
                lft = Ulft.random('num_deltas', 1,...
                                  'req_deltas', {'DeltaIntegrator'});
                % Check that no warning is thrown
                warning_thrown = false;
                try
                    lft_n = normalizeLft(lft);
                catch
                    warning_thrown = true;
                end
                verifyFalse(testCase, warning_thrown)
                % Check that lft is unchanged
                verifyEqual(testCase, lft_n, lft)
            end
            warning(warning_state)
        end
    end
end

%%  CHANGELOG
% Sep. 28, 2021 (v0.6.0)
% Aug. 26, 2021 (v.0.5.0): Initial release - Micah Fry (micah.fry@ll.mit.edu)