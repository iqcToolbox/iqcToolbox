%% Requirements:
%  1. IQC analysis shall produce an "infeasible problem" result when analyzing
%     systems if their exponential decay rate is greater than that specified
%     by the analysis options.
%  2. IQC analysis shall produce a valid solution proving that an uncertain
%     system has a pre-specified exponential decay rate for many uncertain
%     systems which have such a decay rate. Producing a certificate for ALL
%     uncertain systems with such a decay rate is not expected.

%%
%  Copyright (c) 2021 Massachusetts Institute of Technology 
%  SPDX-License-Identifier: GPL-2.0
%%

%% Test class for IQC analysis with Sector-Bounded operators
classdef testIqcAnalysisExponentialRate < matlab.unittest.TestCase

methods (TestMethodSetup)
function seedAndReportRng(testCase)
    seed = floor(posixtime(datetime('now')));
    rng(seed, 'twister');
    diagnose_str = ...
        sprintf(['Random inputs may be regenerated by calling: \n',...
                 '>> rng(%10d) \n',...
                 'before running the remainder of the test''s body'],...
                seed);
    testCase.onFailure(@() fprintf(diagnose_str));
end    
end

methods (Test)
function testNominalSystems(testCase)
    g = drss;
    g.a = g.a * 0.95;
    exponential = max(abs(eig(g.a)));
    g_lft = toLft(g);
    g_lft = g_lft.addPerformance({PerformanceStable()});
    options = AnalysisOptions('verbose', false);
    % Check if decay rate may be slightly slower than known rate
    options.exponential = exponential * 1.01; 
    result = iqcAnalysis(g_lft, 'analysis_options', options);
    testCase.verifyTrue(result.valid)
    % Check if decay rate may be slightly faster than known rate
    options.exponential = exponential * 0.99; 
    result = iqcAnalysis(g_lft, 'analysis_options', options);
    testCase.verifyFalse(result.valid)
    
    
    %% I'm not getting correct results here...I need to figure out why...
    g = rss;
    g.a = g.a - 0.05 * eye(size(g.a));
    exponential = -max(real(eig(g.a)));
    g_lft = toLft(g);
    g_lft = g_lft.addPerformance({PerformanceStable()});
    options = AnalysisOptions('verbose', false);
    % Check if decay rate may be slightly slower than known rate
    options.exponential = exponential * 0.99; 
    result = iqcAnalysis(g_lft, 'analysis_options', options);
    testCase.verifyTrue(result.valid)
    % Check if decay rate may be slightly faster than known rate
    options.exponential = exponential * 10; 
    [result, ~, ~, lft_analyzed] = iqcAnalysis(g_lft, 'analysis_options', options);
    p = value(result.kyp_variables{1});
    a = lft_analyzed.a{1}; 
    p * a + a' * p + 2 * options.exponential * eye(size(a)) + options.lmi_shift * eye(size(a)) + ...
    value(result.debug.constraints(2));
    testCase.verifyFalse(result.valid)
%     exponential = logspace(-1, 4, 6);
%     valid = [];
%     for expo = exponential
%         options.exponential = expo;
%         result = iqcAnalysis(g_lft, 'analysis_options', options);
%         valid(end + 1) = result.valid;
%     end
    expo_test = exponential * 10;
    N = 100;
    u = zeros(size(g.b, 2), N);
    if ~g.Ts
        t = linspace(0, 10, N);
    else
        t = 0:(N-1);
    end
    x0 = ones(size(g.a, 1), 1);
    [~, ~, x] = lsim(g, u, t, x0);
    x_norm = vecnorm(x');
    figure
    plot(t, x_norm);
    if ~g.Ts
        decay_bound = x_norm(1) * exp(-expo_test * t);
    else
        decay_bound = x_norm(1) * exponential .^ (t);
    end
    hold on
    plot(t, decay_bound)
    legend('x norm', 'decay bound')
end

function testDelayDestabilizes(testCase)
    testCase.verifyTrue(true)
end

function testExponentialStabilityRate(testCase)
end
end
end
